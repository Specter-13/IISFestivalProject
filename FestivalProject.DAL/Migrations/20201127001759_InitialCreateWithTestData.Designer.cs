// <auto-generated />
using System;
using FestivalProject.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FestivalProject.DAL.Migrations
{
    [DbContext(typeof(FestivalDbContext))]
    [Migration("20201127001759_InitialCreateWithTestData")]
    partial class InitialCreateWithTestData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FestivalProject.DAL.Entities.FestivalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("LogoUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Festivals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46abef51-c53f-4cc5-a270-a2756ef1455e"),
                            Capacity = 1500,
                            City = "Piestany",
                            Country = "Slovakia",
                            Description = "One of the best festivals in Slovakia!",
                            EndTime = new DateTime(2020, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 0,
                            LogoUri = "https://www.gregi.net/wp-content/uploads/2018/07/logo-1.jpg",
                            Name = "Grape",
                            Price = 55m,
                            StartTime = new DateTime(2020, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Letiskova 123"
                        },
                        new
                        {
                            Id = new Guid("30d09c0f-f6aa-442c-9d87-2869faf175f4"),
                            Capacity = 10000,
                            City = "Trenčin",
                            Country = "Slovakia",
                            Description = "The best festivals in Slovakia!",
                            EndTime = new DateTime(2020, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genre = 0,
                            LogoUri = "https://dl-media.viber.com/5/share/2/long/vibes/icon/image/0x0/105c/2c48f0221e7b0b58487a6483ba8c19e8a0a4f4d27a7e0291932b5dc92c41105c.jpg",
                            Name = "Pohoda",
                            Price = 70m,
                            StartTime = new DateTime(2020, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Street = "Letisko"
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.FestivalInterpretEntity", b =>
                {
                    b.Property<Guid>("InterpretId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FestivalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterpretId", "FestivalId");

                    b.HasIndex("FestivalId");

                    b.ToTable("FestivalInterprets");

                    b.HasData(
                        new
                        {
                            InterpretId = new Guid("0c41b222-d06b-4021-9668-a4f845bbe57b"),
                            FestivalId = new Guid("46abef51-c53f-4cc5-a270-a2756ef1455e")
                        },
                        new
                        {
                            InterpretId = new Guid("c993e8d3-719b-43d7-908b-e26dc6f4ace0"),
                            FestivalId = new Guid("46abef51-c53f-4cc5-a270-a2756ef1455e")
                        },
                        new
                        {
                            InterpretId = new Guid("0c41b222-d06b-4021-9668-a4f845bbe57b"),
                            FestivalId = new Guid("30d09c0f-f6aa-442c-9d87-2869faf175f4")
                        },
                        new
                        {
                            InterpretId = new Guid("6fe7846f-3d54-4c46-9ebe-7d9558b4589e"),
                            FestivalId = new Guid("30d09c0f-f6aa-442c-9d87-2869faf175f4")
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.InterpretEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("LogoUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Interprets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c41b222-d06b-4021-9668-a4f845bbe57b"),
                            Description = "One of the most talented slovak singer.",
                            Genre = 0,
                            LogoUri = "https://www.adamdurica.com/wp-content/uploads/2019/04/album_adam_durica_mandolina-400x400.jpg",
                            Name = "Adam Durica",
                            Rating = 8.7f
                        },
                        new
                        {
                            Id = new Guid("c993e8d3-719b-43d7-908b-e26dc6f4ace0"),
                            Description = "Without word one of the best metal groups.",
                            Genre = 2,
                            LogoUri = "https://i.pinimg.com/originals/93/47/6b/93476b00366cd9998f5299a75d793f17.jpg",
                            Name = "Metallica",
                            Rating = 9.7f
                        },
                        new
                        {
                            Id = new Guid("6fe7846f-3d54-4c46-9ebe-7d9558b4589e"),
                            Description = "One of the best czech singers.",
                            Genre = 0,
                            LogoUri = "https://upload.wikimedia.org/wikipedia/commons/3/3c/T_Klus_2014.JPG",
                            Name = "Tomas Klus",
                            Rating = 7.7f
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.MemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterpretId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InterpretId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d01d66d9-ac9d-4419-81b3-bc8ae2dfae96"),
                            InterpretId = new Guid("0c41b222-d06b-4021-9668-a4f845bbe57b"),
                            Name = "Janko",
                            Surname = "Mrkvicka"
                        },
                        new
                        {
                            Id = new Guid("af1e3d1f-fbd7-4d2f-a7f1-f7cda8e3547f"),
                            InterpretId = new Guid("0c41b222-d06b-4021-9668-a4f845bbe57b"),
                            Name = "Misko",
                            Surname = "Maly"
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.ReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FestivalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Tickets")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8edf6ecd-8d1d-4fbf-92c1-9640e4bc21d9"),
                            Description = "rezervacia sa vybavuje",
                            FestivalId = new Guid("46abef51-c53f-4cc5-a270-a2756ef1455e"),
                            Name = "Grape rezervacia (mozno bude lepsie nejake cislo rezervacie)",
                            Price = 55m,
                            State = 0,
                            Tickets = 1,
                            UserId = new Guid("e3681bb8-1e7f-4e4f-8abe-58dbd211d6d1")
                        },
                        new
                        {
                            Id = new Guid("f1de571c-fa9e-42de-b19a-a67a66841112"),
                            Description = "rezervacia zruzena kvoli nezaplateniu",
                            FestivalId = new Guid("30d09c0f-f6aa-442c-9d87-2869faf175f4"),
                            Name = "Pohoda rezervacia (mozno bude lepsie nejake cislo rezervacie)",
                            Price = 210m,
                            State = 2,
                            Tickets = 3,
                            UserId = new Guid("e3681bb8-1e7f-4e4f-8abe-58dbd211d6d1")
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.StageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("FestivalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FestivalId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb22c323-729d-49e6-834a-644d47d3dc4c"),
                            Capacity = 600,
                            FestivalId = new Guid("46abef51-c53f-4cc5-a270-a2756ef1455e"),
                            Name = "Main Stage"
                        },
                        new
                        {
                            Id = new Guid("4afd5bb9-6c95-411b-becf-daffb873a7a4"),
                            Capacity = 200,
                            FestivalId = new Guid("46abef51-c53f-4cc5-a270-a2756ef1455e"),
                            Name = "Low Stage"
                        },
                        new
                        {
                            Id = new Guid("f9adad79-fd79-469d-8dda-53400fc572bd"),
                            Capacity = 5000,
                            FestivalId = new Guid("30d09c0f-f6aa-442c-9d87-2869faf175f4"),
                            Name = "Main Stage Pohoda"
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.StageInterpretEntity", b =>
                {
                    b.Property<Guid>("InterpretId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ConcertEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConcertLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("ConcertStart")
                        .HasColumnType("datetime2");

                    b.HasKey("InterpretId", "StageId");

                    b.HasIndex("StageId");

                    b.ToTable("StageInterprets");

                    b.HasData(
                        new
                        {
                            InterpretId = new Guid("0c41b222-d06b-4021-9668-a4f845bbe57b"),
                            StageId = new Guid("cb22c323-729d-49e6-834a-644d47d3dc4c"),
                            ConcertEnd = new DateTime(2020, 7, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcertLength = 120,
                            ConcertStart = new DateTime(2020, 7, 25, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InterpretId = new Guid("c993e8d3-719b-43d7-908b-e26dc6f4ace0"),
                            StageId = new Guid("cb22c323-729d-49e6-834a-644d47d3dc4c"),
                            ConcertEnd = new DateTime(2020, 7, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcertLength = 60,
                            ConcertStart = new DateTime(2020, 7, 26, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            InterpretId = new Guid("6fe7846f-3d54-4c46-9ebe-7d9558b4589e"),
                            StageId = new Guid("f9adad79-fd79-469d-8dda-53400fc572bd"),
                            ConcertEnd = new DateTime(2020, 7, 25, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcertLength = 40,
                            ConcertStart = new DateTime(2020, 7, 26, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Psc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ae18ad6-9809-4b19-be41-94aa4ff622f8"),
                            Country = "Slovakia",
                            Email = "xspavo00@vutrb.cz",
                            Name = "David",
                            Password = "123",
                            Role = 0,
                            Surname = "Spavor",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("e3681bb8-1e7f-4e4f-8abe-58dbd211d6d1"),
                            City = "Bratislava",
                            Country = "Slovakia",
                            Email = "trdielko@hotmail.sk",
                            Name = "Barbora",
                            Password = "12345",
                            Psc = "03855",
                            Role = 3,
                            Street = "Vajnorska",
                            Surname = "Bakosova",
                            Username = "trdielko"
                        },
                        new
                        {
                            Id = new Guid("54d733af-b179-418c-b7d3-ca3d3f7c96a4"),
                            City = "Pardubice",
                            Country = "Czech Republic",
                            Email = "simonko@gmail.sk",
                            Name = "Simon",
                            Password = "pokladni",
                            Psc = "13845",
                            Role = 2,
                            Street = "Orlojova",
                            Surname = "Sedlacek",
                            Username = "pokladni"
                        },
                        new
                        {
                            Id = new Guid("2b578e7f-adef-4511-86d6-4237cf958d80"),
                            City = "Praha",
                            Country = "Czech Republic",
                            Email = "gutentag@gmail.com",
                            Name = "Bolek",
                            Password = "organizator",
                            Psc = "236548",
                            Role = 1,
                            Street = "Letna",
                            Surname = "Polivka",
                            Username = "organizator"
                        });
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.FestivalInterpretEntity", b =>
                {
                    b.HasOne("FestivalProject.DAL.Entities.FestivalEntity", "Festival")
                        .WithMany("FestivalInterpret")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FestivalProject.DAL.Entities.InterpretEntity", "Interpret")
                        .WithMany("FestivalInterpret")
                        .HasForeignKey("InterpretId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.MemberEntity", b =>
                {
                    b.HasOne("FestivalProject.DAL.Entities.InterpretEntity", "Interpret")
                        .WithMany("MemberList")
                        .HasForeignKey("InterpretId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.ReservationEntity", b =>
                {
                    b.HasOne("FestivalProject.DAL.Entities.FestivalEntity", "Festival")
                        .WithMany()
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FestivalProject.DAL.Entities.UserEntity", "User")
                        .WithMany("ReservationList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.StageEntity", b =>
                {
                    b.HasOne("FestivalProject.DAL.Entities.FestivalEntity", "Festival")
                        .WithMany("StageList")
                        .HasForeignKey("FestivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FestivalProject.DAL.Entities.StageInterpretEntity", b =>
                {
                    b.HasOne("FestivalProject.DAL.Entities.InterpretEntity", "Interpret")
                        .WithMany("StageInterpret")
                        .HasForeignKey("InterpretId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FestivalProject.DAL.Entities.StageEntity", "Stage")
                        .WithMany("StageInterpret")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
